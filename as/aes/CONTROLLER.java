package generatedbyassl.as.aes;

import java.io.Serializable;
import generatedbyassl.as.ASSLAE;
import generatedbyassl.as.aes.controller.controlloop.*;

/**
 * Generated by ASSL Framework
 * 
 * This is the Java class generated for 'Controller' (specified as AE ASSL tier).
 */
public class CONTROLLER
	extends ASSLAE
	implements  Serializable
{

	/**
	 * Generated by ASSL Framework
	 * 
	 * This is a reference to the unique instance of 'CONTROLLER' class.
	 */
	static private CONTROLLER oInstance = null;
	/**
	 * Generated by ASSL Framework
	 * 
	 * Needed by the class because it implements the Serializable interface.
	 */
	static final long serialVersionUID = 0001L;
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AE control loop's monitor.
	 */
	private CONTROLLER_ASSLMONITOR oMonitor = new CONTROLLER_ASSLMONITOR();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AE control loop's analyzer.
	 */
	private CONTROLLER_ASSLANALYZER oAnalyzer = new CONTROLLER_ASSLANALYZER();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AE control loop's simulator.
	 */
	private CONTROLLER_ASSLSIMULATOR oSimulator = new CONTROLLER_ASSLSIMULATOR();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AE control loop's executor.
	 */
	private CONTROLLER_ASSLEXECUTOR oExecutor = new CONTROLLER_ASSLEXECUTOR();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the FRIENDS class.
	 */
	public generatedbyassl.as.aes.controller.FRIENDS FRIENDS = generatedbyassl.as.aes.controller.FRIENDS.getInstance();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AEIP class.
	 */
	public generatedbyassl.as.aes.controller.AEIP AEIP = generatedbyassl.as.aes.controller.AEIP.getInstance();

	/**
	 * Generated by ASSL Framework
	 * 
	 * Because this is a singleton class its constructor is private.
	 */
	private  CONTROLLER (  )
	{
		vPolicies.put( "SELF_CONFIGURING", generatedbyassl.as.aes.controller.aeself_management.SELF_CONFIGURING.getInstance() );
		vPolicies.put( "SELF_HEALING", generatedbyassl.as.aes.controller.aeself_management.SELF_HEALING.getInstance() );
		ACTIONS.put( "IDENTIFYTRAFFIC", generatedbyassl.as.aes.controller.actions.IDENTIFYTRAFFIC.getInstance() );
		ACTIONS.put( "CLASSIFYPACKETS", generatedbyassl.as.aes.controller.actions.CLASSIFYPACKETS.getInstance() );
		ACTIONS.put( "CREATEVIDACL", generatedbyassl.as.aes.controller.actions.CREATEVIDACL.getInstance() );
		ACTIONS.put( "CREATEVOICEACL", generatedbyassl.as.aes.controller.actions.CREATEVOICEACL.getInstance() );
		ACTIONS.put( "CREATEDATAACL", generatedbyassl.as.aes.controller.actions.CREATEDATAACL.getInstance() );
		ACTIONS.put( "LABELTRAFFIC", generatedbyassl.as.aes.controller.actions.LABELTRAFFIC.getInstance() );
		ACTIONS.put( "ASSIGNQOSLABELCHECKED", generatedbyassl.as.aes.controller.actions.ASSIGNQOSLABELCHECKED.getInstance() );
		ACTIONS.put( "POLICING", generatedbyassl.as.aes.controller.actions.POLICING.getInstance() );
		ACTIONS.put( "INPUTANDOUTPUT", generatedbyassl.as.aes.controller.actions.INPUTANDOUTPUT.getInstance() );
		ACTIONS.put( "MARKTRAFFIC", generatedbyassl.as.aes.controller.actions.MARKTRAFFIC.getInstance() );
		ACTIONS.put( "CHECKPOLICER", generatedbyassl.as.aes.controller.actions.CHECKPOLICER.getInstance() );
		ACTIONS.put( "PASSPACKET", generatedbyassl.as.aes.controller.actions.PASSPACKET.getInstance() );
		ACTIONS.put( "DROPPACKET", generatedbyassl.as.aes.controller.actions.DROPPACKET.getInstance() );
		ACTIONS.put( "EVALUATEQOS", generatedbyassl.as.aes.controller.actions.EVALUATEQOS.getInstance() );
		ACTIONS.put( "SETQOSGOLD", generatedbyassl.as.aes.controller.actions.SETQOSGOLD.getInstance() );
		ACTIONS.put( "RECONFIGURE", generatedbyassl.as.aes.controller.actions.RECONFIGURE.getInstance() );
		ACTIONS.put( "RECONFIGUREAN", generatedbyassl.as.aes.controller.actions.RECONFIGUREAN.getInstance() );
		EVENTS.put( "IPPACKETRECEIVED", generatedbyassl.as.aes.controller.events.IPPACKETRECEIVED.getInstance() );
		EVENTS.put( "TRAFFICIDENTIFIED", generatedbyassl.as.aes.controller.events.TRAFFICIDENTIFIED.getInstance() );
		EVENTS.put( "TRAFFICRECEIVED", generatedbyassl.as.aes.controller.events.TRAFFICRECEIVED.getInstance() );
		EVENTS.put( "VIDEOCLASSIFIED", generatedbyassl.as.aes.controller.events.VIDEOCLASSIFIED.getInstance() );
		EVENTS.put( "VOICECLASSIFIED", generatedbyassl.as.aes.controller.events.VOICECLASSIFIED.getInstance() );
		EVENTS.put( "DATACLASSIFIED", generatedbyassl.as.aes.controller.events.DATACLASSIFIED.getInstance() );
		EVENTS.put( "CLASSIFICATIONDONE", generatedbyassl.as.aes.controller.events.CLASSIFICATIONDONE.getInstance() );
		EVENTS.put( "TIMETOLABEL", generatedbyassl.as.aes.controller.events.TIMETOLABEL.getInstance() );
		EVENTS.put( "QOSLABELED", generatedbyassl.as.aes.controller.events.QOSLABELED.getInstance() );
		EVENTS.put( "QOSLABELEDCHECKED", generatedbyassl.as.aes.controller.events.QOSLABELEDCHECKED.getInstance() );
		EVENTS.put( "TIMETOPOLICING", generatedbyassl.as.aes.controller.events.TIMETOPOLICING.getInstance() );
		EVENTS.put( "POLICINGDONE", generatedbyassl.as.aes.controller.events.POLICINGDONE.getInstance() );
		EVENTS.put( "POLICYCHECKED", generatedbyassl.as.aes.controller.events.POLICYCHECKED.getInstance() );
		EVENTS.put( "TIMETORECONFIGURE", generatedbyassl.as.aes.controller.events.TIMETORECONFIGURE.getInstance() );
		EVENTS.put( "TIMETOMARKING", generatedbyassl.as.aes.controller.events.TIMETOMARKING.getInstance() );
		EVENTS.put( "PASSED", generatedbyassl.as.aes.controller.events.PASSED.getInstance() );
		EVENTS.put( "DROPPED", generatedbyassl.as.aes.controller.events.DROPPED.getInstance() );
		EVENTS.put( "TIMETOEVALUATINGQOS", generatedbyassl.as.aes.controller.events.TIMETOEVALUATINGQOS.getInstance() );
		EVENTS.put( "MARKINGDONE", generatedbyassl.as.aes.controller.events.MARKINGDONE.getInstance() );
		EVENTS.put( "EVALUATIONDONE", generatedbyassl.as.aes.controller.events.EVALUATIONDONE.getInstance() );
		EVENTS.put( "RECONFIGURATIONDONE", generatedbyassl.as.aes.controller.events.RECONFIGURATIONDONE.getInstance() );
		EVENTS.put( "RECONFIGURATIONFAILED", generatedbyassl.as.aes.controller.events.RECONFIGURATIONFAILED.getInstance() );
		EVENTS.put( "DEFAULTOPTION", generatedbyassl.as.aes.controller.events.DEFAULTOPTION.getInstance() );
		EVENTS.put( "QOSGOLDSET", generatedbyassl.as.aes.controller.events.QOSGOLDSET.getInstance() );
		METRICS.put( "COS", generatedbyassl.as.aes.controller.metrics.COS.getInstance() );
		METRICS.put( "BANDWIDTHPOLICER", generatedbyassl.as.aes.controller.metrics.BANDWIDTHPOLICER.getInstance() );
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * This method returns the unique instance of 'CONTROLLER' class.
	 */
	static public CONTROLLER getInstance (  )
	{
		if ( null == oInstance ) 
		{
			oInstance = new CONTROLLER();
		}
		return oInstance;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Sets the control loop components.
	 */
	protected void setControlLoop (  )
	{
		//**** This method overrides the super class's method.
		//****************************************************
		oMonitor.setMonitoredSLO(AESLO);
		oMonitor.setMonitoredMetrics(METRICS);
		oMonitor.setAnalyzer(oAnalyzer);
		oAnalyzer.setSimulator(oSimulator);
		oAnalyzer.setExecutor(oExecutor);
		oSimulator.setExecutor(oExecutor);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Performs the AE control loop.
	 */
	protected void controlLoop (  )
	{
		//**** This method overrides the super class's method.
		//****************************************************
		try
		{
			//**** control loops should not be very resource-consuming, thus it releases CPU for a while
			Thread.sleep(1000);
		}
		catch ( InterruptedException ex ) 
		{
			System.err.println( ex.getMessage() );
		}
		//**** performs AE control loop monitor-analyzer-simulator-executor
		oMonitor.perform();
		oAnalyzer.perform();
		oSimulator.perform();
		oExecutor.perform();
		//**** applies all the "switched-on" self-management policies for the AS
		applayPolicies();
	}

}